'use client';

import React, { useState, useRef, useEffect } from 'react';
import { Button } from '../ui/button';
import { Input } from '../input/input';
import { Card, CardContent } from '../card/card';
import { 
  MessageCircle, 
  X, 
  Send, 
  Bot, 
  User,
  Minimize2,
  Maximize2
} from 'lucide-react';

interface Message {
  id: string;
  text: string;
  isUser: boolean;
  timestamp: Date;
}

interface AIChatProps {
  className?: string;
}

export function AIChat({ className = '' }: AIChatProps) {
  const [isOpen, setIsOpen] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: 'Xin ch√†o! T√¥i l√† AI Assistant c·ªßa KatHome In Town. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ c√°c ph√≤ng, ƒë·∫∑t ph√≤ng, ho·∫∑c tr·∫£ l·ªùi c√°c c√¢u h·ªèi kh√°c. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨?',
      isUser: false,
      timestamp: new Date()
    }
  ]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSendMessage = async () => {
    if (!inputValue.trim() || isLoading) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputValue.trim(),
      isUser: true,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsLoading(true);

    // Simulate AI response
    setTimeout(() => {
      const aiResponse: Message = {
        id: (Date.now() + 1).toString(),
        text: generateAIResponse(inputValue.trim()),
        isUser: false,
        timestamp: new Date()
      };
      setMessages(prev => [...prev, aiResponse]);
      setIsLoading(false);
    }, 1000 + Math.random() * 1000);
  };

  const generateAIResponse = (userInput: string): string => {
    const input = userInput.toLowerCase();
    
    if (input.includes('ph√≤ng') || input.includes('room')) {
      return 'Ch√∫ng t√¥i c√≥ nhi·ªÅu lo·∫°i ph√≤ng kh√°c nhau: Standard, Deluxe, VIP, Suite. M·ªói ph√≤ng ƒë·ªÅu c√≥ ƒë·∫ßy ƒë·ªß ti·ªán nghi hi·ªán ƒë·∫°i. B·∫°n mu·ªën t√¨m hi·ªÉu v·ªÅ lo·∫°i ph√≤ng n√†o?';
    }
    
    if (input.includes('gi√°') || input.includes('price') || input.includes('cost')) {
      return 'Gi√° ph√≤ng dao ƒë·ªông t·ª´ 500,000ƒë - 1,500,000ƒë/ƒë√™m t√πy theo lo·∫°i ph√≤ng v√† th·ªùi gian. B·∫°n c√≥ th·ªÉ xem chi ti·∫øt gi√° trong trang t√¨m ki·∫øm ho·∫∑c chi ti·∫øt ph√≤ng.';
    }
    
    if (input.includes('ƒë·∫∑t ph√≤ng') || input.includes('book') || input.includes('reservation')) {
      return 'ƒê·ªÉ ƒë·∫∑t ph√≤ng, b·∫°n c√≥ th·ªÉ: 1) T√¨m ki·∫øm ph√≤ng theo ng√†y v√† s·ªë kh√°ch, 2) Ch·ªçn ph√≤ng ph√π h·ª£p, 3) ƒêi·ªÅn th√¥ng tin v√† thanh to√°n. T√¥i c√≥ th·ªÉ h∆∞·ªõng d·∫´n b·∫°n t·ª´ng b∆∞·ªõc!';
    }
    
    if (input.includes('ti·ªán nghi') || input.includes('amenities')) {
      return 'C√°c ph√≤ng ƒë·ªÅu c√≥: WiFi mi·ªÖn ph√≠, TV, m√°y l·∫°nh, t·ªß l·∫°nh mini, ph√≤ng t·∫Øm ri√™ng, ƒë·ªì v·ªá sinh c√° nh√¢n, v√† nhi·ªÅu ti·ªán nghi kh√°c. M·ªôt s·ªë ph√≤ng c√≤n c√≥ ban c√¥ng v√† view ƒë·∫πp!';
    }
    
    if (input.includes('v·ªã tr√≠') || input.includes('location') || input.includes('ƒë·ªãa ch·ªâ')) {
      return 'KatHome In Town c√≥ nhi·ªÅu c∆° s·ªü t·∫°i H√† N·ªôi: T√¢y H·ªì, Ba ƒê√¨nh, Ho√†n Ki·∫øm, Thanh Xu√¢n, ƒê·ªëng ƒêa, C·∫ßu Gi·∫•y. M·ªói c∆° s·ªü ƒë·ªÅu c√≥ v·ªã tr√≠ thu·∫≠n ti·ªán g·∫ßn trung t√¢m.';
    }
    
    if (input.includes('h·ªßy') || input.includes('cancel')) {
      return 'B·∫°n c√≥ th·ªÉ h·ªßy ƒë·∫∑t ph√≤ng mi·ªÖn ph√≠ tr∆∞·ªõc 24 ti·∫øng. Sau ƒë√≥ s·∫Ω c√≥ ph√≠ h·ªßy theo ch√≠nh s√°ch. B·∫°n c·∫ßn h·ªó tr·ª£ h·ªßy ƒë·∫∑t ph√≤ng n√†o kh√¥ng?';
    }
    
    if (input.includes('thanh to√°n') || input.includes('payment')) {
      return 'Ch√∫ng t√¥i ch·∫•p nh·∫≠n thanh to√°n b·∫±ng: Th·∫ª t√≠n d·ª•ng, chuy·ªÉn kho·∫£n ng√¢n h√†ng, ho·∫∑c thanh to√°n t·∫°i qu·∫ßy. B·∫°n c√≥ th·ªÉ thanh to√°n khi nh·∫≠n ph√≤ng.';
    }
    
    if (input.includes('c·∫£m ∆°n') || input.includes('thank')) {
      return 'Kh√¥ng c√≥ g√¨! T√¥i r·∫•t vui ƒë∆∞·ª£c gi√∫p ƒë·ª° b·∫°n. N·∫øu c√≥ th√™m c√¢u h·ªèi g√¨, ƒë·ª´ng ng·∫°i h·ªèi nh√©! üòä';
    }
    
    // Default response
    const responses = [
      'T√¥i hi·ªÉu b·∫°n ƒëang h·ªèi v·ªÅ: "' + userInput + '". B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ ph√≤ng, gi√°, ƒë·∫∑t ph√≤ng, ti·ªán nghi, ho·∫∑c b·∫•t k·ª≥ th√¥ng tin n√†o v·ªÅ KatHome In Town.',
      'ƒê·ªÉ t√¥i gi√∫p b·∫°n t·ªët h∆°n, b·∫°n c√≥ th·ªÉ h·ªèi c·ª• th·ªÉ v·ªÅ: c√°c lo·∫°i ph√≤ng, gi√° c·∫£, c√°ch ƒë·∫∑t ph√≤ng, ti·ªán nghi, ho·∫∑c v·ªã tr√≠ c√°c c∆° s·ªü.',
      'T√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n v·ªÅ th√¥ng tin ph√≤ng, ƒë·∫∑t ph√≤ng, gi√° c·∫£, ti·ªán nghi, v√† c√°c d·ªãch v·ª• c·ªßa KatHome In Town. B·∫°n mu·ªën bi·∫øt g√¨ c·ª• th·ªÉ?'
    ];
    
    return responses[Math.floor(Math.random() * responses.length)];
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString('vi-VN', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  return (
    <div className={`fixed bottom-4 right-4 z-50 ${className}`}>
      {/* Chat Toggle Button */}
      {!isOpen && (
        <Button
          onClick={() => setIsOpen(true)}
          className="w-14 h-14 rounded-full shadow-lg hover:shadow-xl transition-all duration-300"
          style={{ backgroundColor: '#3D0301' }}
        >
          <MessageCircle className="w-6 h-6 text-white" />
        </Button>
      )}

      {/* Chat Window */}
      {isOpen && (
        <Card 
          className={`w-80 shadow-2xl transition-all duration-300 ${
            isMinimized ? 'h-12' : 'h-96'
          }`}
          style={{ backgroundColor: '#fef5f6' }}
        >
          <CardContent className="p-0 h-full flex flex-col">
            {/* Header */}
            <div 
              className="flex items-center justify-between p-3 border-b cursor-pointer"
              style={{ backgroundColor: '#3D0301', borderColor: '#F8E8EC' }}
              onClick={() => setIsMinimized(!isMinimized)}
            >
              <div className="flex items-center space-x-2">
                <Bot className="w-5 h-5 text-white" />
                <span className="text-white font-medium">AI Assistant</span>
              </div>
              <div className="flex items-center space-x-1">
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={(e) => {
                    e.stopPropagation();
                    setIsMinimized(!isMinimized);
                  }}
                  className="text-white hover:bg-white/20 p-1"
                >
                  {isMinimized ? <Maximize2 className="w-4 h-4" /> : <Minimize2 className="w-4 h-4" />}
                </Button>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setIsOpen(false)}
                  className="text-white hover:bg-white/20 p-1"
                >
                  <X className="w-4 h-4" />
                </Button>
              </div>
            </div>

            {!isMinimized && (
              <>
                {/* Messages */}
                <div className="flex-1 overflow-y-auto p-3 space-y-3">
                  {messages.map((message) => (
                    <div
                      key={message.id}
                      className={`flex ${message.isUser ? 'justify-end' : 'justify-start'}`}
                    >
                      <div
                        className={`max-w-[80%] rounded-lg p-3 ${
                          message.isUser
                            ? 'rounded-br-sm'
                            : 'rounded-bl-sm'
                        }`}
                        style={{
                          backgroundColor: message.isUser ? '#3D0301' : '#FAD0C4',
                          color: message.isUser ? 'white' : '#3D0301'
                        }}
                      >
                        <div className="flex items-start space-x-2">
                          {!message.isUser && (
                            <Bot className="w-4 h-4 mt-0.5 flex-shrink-0" />
                          )}
                          {message.isUser && (
                            <User className="w-4 h-4 mt-0.5 flex-shrink-0" />
                          )}
                          <div className="flex-1">
                            <p className="text-sm">{message.text}</p>
                            <p 
                              className="text-xs mt-1 opacity-70"
                              style={{ 
                                color: message.isUser ? 'rgba(255,255,255,0.7)' : 'rgba(61,3,1,0.7)' 
                              }}
                            >
                              {formatTime(message.timestamp)}
                            </p>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                  
                  {isLoading && (
                    <div className="flex justify-start">
                      <div
                        className="max-w-[80%] rounded-lg rounded-bl-sm p-3"
                        style={{ backgroundColor: '#FAD0C4', color: '#3D0301' }}
                      >
                        <div className="flex items-center space-x-2">
                          <Bot className="w-4 h-4" />
                          <div className="flex space-x-1">
                            <div className="w-2 h-2 bg-current rounded-full animate-bounce" style={{ animationDelay: '0ms' }}></div>
                            <div className="w-2 h-2 bg-current rounded-full animate-bounce" style={{ animationDelay: '150ms' }}></div>
                            <div className="w-2 h-2 bg-current rounded-full animate-bounce" style={{ animationDelay: '300ms' }}></div>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                  
                  <div ref={messagesEndRef} />
                </div>

                {/* Input */}
                <div className="p-3 border-t" style={{ borderColor: '#F8E8EC' }}>
                  <div className="flex space-x-2">
                    <Input
                      ref={inputRef}
                      value={inputValue}
                      onChange={(e) => setInputValue(e.target.value)}
                      onKeyPress={handleKeyPress}
                      placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."
                      className="flex-1"
                      disabled={isLoading}
                    />
                    <Button
                      onClick={handleSendMessage}
                      disabled={!inputValue.trim() || isLoading}
                      size="sm"
                      className="px-3"
                      style={{ backgroundColor: '#3D0301' }}
                    >
                      <Send className="w-4 h-4" />
                    </Button>
                  </div>
                </div>
              </>
            )}
          </CardContent>
        </Card>
      )}
    </div>
  );
}
